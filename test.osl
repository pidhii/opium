
println(list([1,2,3,4].iter()))

println("iterate over list")
for x in [1, 2, 3, 4, 5] do
  println("-", x)

println("iterate over vector")
vec = vector([1, 2, 3, 4].iter())
vec.push(5)
for x in vec do
  println("vec -", x)


require "subprocess"
for line in run("ls -lrth")#stdout.lines() do
  println(line)


require "dict"
dd = dict()
set dd["one"] = 1
println(dd["one"])


require "trie"
d = trie()
d = d.insert("one", 1)
println(d["one"])


require "json"
let j = open("test.json", "r").read_json() in
println(dict(j))


require "coroutines"
dictkeys(dict) =
  generator(yield =>
    dict.foreach((k, v) => yield(k)))

for key in dictkeys(dd) do
  println("-", key)


println("testing regex")
re = regexp("([a-z]+)([0-9]+)")
match "___adfasd12312".find(re) in
| Some(ms) ->
    for m in ms do {
      println("-", m)
    }
| otherwize -> println("didnt match")

require "argv"
my_option = ""
my_flag = false
options = [
  option("my-option")
  .docstring("the command-line argument")
  .required(true)
  .value(true)
  .handle(x => set my_option = x)
  ,
  option("my-flag")
  .docstring("the flag")
  .handle(x => set my_flag = true)
]
posargs = getopt(["--my-option=42", "--my-option=foo", "--my-flag", "42", "15"], options)
println("my_option =", my_option)
println("my_flag =", my_flag)
println("posargs =", posargs)

// require "zmq"

// type message = {
//   message str,
// }

// message(j json) = message(j["message"].str())
// json(msg message) = {
//   struct = dict()
//   set struct["message"] = JsonString(msg#message)
//   return JsonStructure(struct)
// }

// ctx = zmq_context(1)
// sock = ctx.socket(zmq_rep)
// sock.bind("tcp://*:4444")
// request = sock.receive().expect("Failed to receive a request").str().parse_json()
// println("request.message:", message(request)#message)
// response = call_with_output_string(port => writejson(message("Hi there!").json(), port))
// println("response:", response)
// sock.send(response)


type foobar = Foo | Bar
foo = Foo
match foo in
| Foo -> println("This is foo")
| Bar -> println("This is bar")


println("c,compile".split(r"\w+"))


if let hd : tl = [1, 2, 3] then
  println("head: ", hd, ", tail: ", tl)


blb = blob(64)
println("blb: ", blb)
set blb#u16[0] = 0xBEAF
println("blb: ", blb)

// println("read_blob() -> ", read_blob().unpack())
