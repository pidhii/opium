
#pragma scheme-translator {
  (inline
    (cond-expand
      (guile (import (srfi :9) (srfi :11)))
      (chicken)))
}

////
//
// Builtin basic functions
//
#pragma prolog {
  (predicate (result-of (not _) bool))
}

////
//
// Define cons-list:
//
//   type list(T) = Cons(T, list(T))
//                | EmptyList()
//
#pragma prolog {
  (ensure-loaded "prolog-std.scm")

  ;; Constructor types
  (predicate (result-of (cons T (list T)) (list T)))
  (predicate (result-of (oslctor:Cons T (list T)) (list T)))
  (predicate (result-of (oslctor:EmptyList) (list _)))

  ;; Rules for type-cases
  (predicate (match-on (oslctor:Cons T (list T)) (list T)))
  (predicate (match-on (oslctor:EmptyList) (list _)))

  ;; Builtin Scheme functions for lists
  (predicate (result-of (car (list T)) T))
  (predicate (result-of (cdr (list T)) (list T)))
}
//
#pragma scheme-translator {
  ;; Rules for translation of cases expressions with list
  (cases-rule (oslctor:Cons _ _) (list _) pair? unpack-pair)
  (cases-rule (oslctor:EmptyList) (list _) null? <unused>) ;; nothing to unpack

  ;; Inline auxiliary functions to avoid type-check and name mangling
  (inline
    (define (unpack-pair p) (values (car p) (cdr p)))
    (define oslctor:Cons cons)
    (define (oslctor:EmptyList) '())
    (define osl_list list)
  )
}

type maybe(T) = Some(T) | Nothing()

require "error"
unpack(x maybe(T)) = match x in
| Some(value) -> value
| Nothing()   -> error("Unpack Nothing()")

expect(x maybe(T), message str) = match x in
| Some(value) -> value
| Nothing()   -> error(message)

unpack_or(x maybe(T), default T) = match x in
| Some(value) -> value
| Nothing()   -> default

bool(x maybe(T)) = match x in
| Some(value) -> true
| Nothing()   -> false


////
//
// Function type coercion
//
#pragma prolog {
  (predicate (result-of (coerce_function Fn) (fn Args Result))
    (result-of (Fn . Args) Result))
  (predicate (result-of ((fn Args Result) . Args) Result))
}
#pragma scheme-translator {
  (inline
    (define (coerce_function x) x))
}
coerce(f) = coerce_function(f)


////////////////////////////////////////////////////////////////////////////////
//                               meta
//
// Every iterator is also an *iterable*
iter(it) = {
  assert { next(it) :: maybe(T) }
  return it
}