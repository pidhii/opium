require "array"
require "error"
require "number"


type vector(T) = {
  data array(T),
  size num
}

////////////////////////////////////////////////////////////////////////////////
//                           constructors
//
vector() = vector(makeUninitializedArray(0), 0)

vector(iterable) = {
  result = vector()
  for x in iterable do
    result.push(x)
  return result
}


////////////////////////////////////////////////////////////////////////////////
//                      common vector operation
//
push(vec vector(T), x) = {
  // Check if we have enough space for the new element and, if not, reallocate
  // array with doubled capacity
  capacity = length(vec#data)
  if vec#size == capacity then
  {
    if capacity == 0 then
      set vec#data = makeUninitializedArray(1)
    else
      set vec#data = copyArray(vec#data, 0, capacity * 2)
  }
  
  // Append new element and increment vector size
  set vec#data[vec#size] = x
  set vec#size = vec#size + 1
}


////////////////////////////////////////////////////////////////////////////////
//                     element access and modification 
//
vec[k] =
  if k >= vec#size then
    error("vector index out of range:", k, vec)
  else
    vec#data[k]

set vec[k] = x =
  if k >= vec#size then
    error("vector index out of range:", k, vec)
  else
    set vec#data[k] = x


////////////////////////////////////////////////////////////////////////////////
//                       common container methods
//
length(vec vector(T)) = vec#size



////////////////////////////////////////////////////////////////////////////////
//                             iterator
//
// NOTE: Use array iterator to iterate over the vector data.
//
iter(vec vector(T), from num, to num) = {
  if from < 0 or from >= vec#size then
    error("Vector index out of range", from, vec)
  if to < 0 or to > vec#size then
    error("Vector index out of range", to, vec)
  return arrayIterator(vec#data, from, to)
}

iter(vec vector(T), from num) = iter(vec, from, vec#size)
iter(vec vector(T)) = arrayIterator(vec#data, 0, vec#size)
