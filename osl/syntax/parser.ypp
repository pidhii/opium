%require "3.2"
%language "C"

%define parse.error verbose
/* Just for the sake of safety. */
/* %define parse.lac full */
/* LAR(1) has issues after adding module-syntax. */
%define lr.type ielr
/*%glr-parser*/
%define parse.lac full
%define api.value.type { opi::value }

%define api.pure full
%param { yyscan_t scanner }
%locations
%define api.location.type { range_location }

%{
#include "syntax_definitions.h"
#include "location.hh"
#include "../osl/unroll_flow.hpp" // FIXME

#include "opium/value.hpp"
#include "opium/logging.hpp"
#include "opium/pretty_print.hpp"
#include "opium/stl/vector.hpp"
#include "opium/lisp_parser.hpp"
#include "opium/utilities/ranges.hpp"
#include "opium/utilities/state_saver.hpp"

#include <unordered_set>
#include <fstream>
#include <algorithm>
#include <sstream>
#include <filesystem>
#include <cassert>


static opi::value* g_result_ptr;

#define YYMALLOC opi::allocate
#define YYREALLOC GC_realloc
#define YYFREE GC_free
#define YYSTACK_USE_ALLOCA 1

#define YYLLOC_DEFAULT(Cur, Rhs, N)                    \
do {                                                   \
  if (N)                                               \
  {                                                    \
    (Cur).left = YYRHSLOC(Rhs, 1).left;                \
    (Cur).right = YYRHSLOC(Rhs, N).right;              \
  }                                                    \
  else                                                 \
  {                                                    \
    (Cur).left = (Cur).right = YYRHSLOC(Rhs, 0).right; \
  }                                                    \
} while (0)



namespace opi::osl {

opi::value
parse(const std::string &source, std::FILE *file, bool is_root = false);

}

static std::string g_source;
size_t g_fileoffs_left;
size_t g_fileoffs_right;


struct range_location;
static void
bindloc(opi::value val, const range_location &loc);

opi::source_location
make_location(const range_location &loc);



static opi::value
mangle_type_constructor(opi::value ctor)
{
  const opi::value result = opi::sym("oslctor:" + std::string(opi::sym_name(ctor)));
  copy_location(ctor, result);
  return result;
}


static opi::value
random_access_getter()
{
  return "osl:ref";
}


static opi::value
random_access_setter()
{
  return "osl:set";
}



template <std::output_iterator<opi::value> Output>
opi::value
generate_record_definition(opi::value typesign, opi::value name, opi::value ctorname,
                           opi::value fields, opi::value fieldtypes,
                           opi::value predname, Output output)
{
  // Getters and setters
  opi::value accessors = opi::nil;
  for (const opi::value field : opi::range(fields))
  {
    const opi::value gettername = opi::sym(std::format("{}-{}", ctorname, field));
    const opi::value settername = opi::sym(std::format("{}-set-{}!", ctorname, field));
    copy_location(field, gettername);
    copy_location(field, settername);
    accessors = append(accessors, list(list(field, gettername, settername)));
  }

  // Write define-record-type expression
  const opi::value recorddef = list("define-record-type", name,
                                    cons(ctorname, fields), predname,
                                    opi::dot, accessors);
  *output++ = list("pragma", "scheme-translator", list("inline", recorddef));

  opi::value predicates = opi::nil;

  // Write type signature for constructor
  const opi::value ctorsign = cons(ctorname, fieldtypes);
  const opi::value ctorpred = list("predicate", list("result-of", ctorsign, typesign));
  predicates = append(predicates, list(ctorpred));

  // Write type signatures of acessors
  if (fields != opi::nil)
  {
    for (const auto &[field, type] : opi::utl::zip(range(accessors), range(fieldtypes)))
    {
      const opi::value getter = car(cdr(field));
      const opi::value setter = car(cdr(cdr(field)));
      const opi::value getterpred =
          list("predicate", list("result-of", list(getter, typesign), type));
      const opi::value setterpred = 
          list("predicate", list("result-of", list(setter, typesign, type), "void"));
      predicates = append(predicates, list(getterpred, setterpred));
    }
  }

  *output++ = list("pragma", "prolog", opi::dot, predicates);

  return recorddef;
}


static std::pair<opi::value, opi::value>
field_accessors(opi::value recorddef, opi::value field)
{
  const opi::value accessors = cdr(cdr(cdr(cdr(recorddef))));
  opi::value fieldaccessors;
  if (not assoc(field, accessors, fieldaccessors))
    throw std::runtime_error {std::format("No accessors for field {}", field)};
  return {car(fieldaccessors), car(cdr(fieldaccessors))};
}


static opi::value
generate_unpack_definition(opi::value recorddef, opi::value unpackname)
{
  const opi::value signature = car(cdr(cdr(recorddef)));
  const opi::value fields = cdr(signature);

  opi::value args = opi::nil;
  for (const opi::value field : opi::range(fields))
  {
    const opi::value getter = field_accessors(recorddef, field).first;
    const opi::value getfield = list(getter, "x");
    args = append(args, list(getfield));
  }

  return list("define", list(unpackname, "x"), cons("values", args));
}



template <std::output_iterator<opi::value> Output>
static void
generate_variant(opi::value typesign, opi::value ctorsign, Output output,
                 const opi::source_location &location)
{
  // NOTE: Don't allow overloading constructors for now
  //       (no particular reason, just a design decision; can change it later)
  const opi::value type = issym(typesign) ? typesign : car(typesign);
  const opi::value ctorname = car(ctorsign);
  const opi::value mangledctor = mangle_type_constructor(ctorname);
  const opi::value mangledctorsign = cons(mangledctor, cdr(ctorsign));
  const size_t arity = length(cdr(ctorsign));

  const opi::value recordname = opi::sym(std::format("{}.{}", type, ctorname));
  set_location(recordname, location);
  opi::value fields = opi::nil;
  for (size_t i = 0; i < arity; ++i)
  {
    const opi::value fieldname {std::format(":{}", i).c_str()};
    set_location(fieldname, location);
    fields = append(fields, list(fieldname));
  }
  const opi::value predname = opi::sym(std::format("{}?", recordname));
  const opi::value unpackname = opi::sym(std::format("unpack-{}", recordname));
  set_location(predname, location);
  set_location(unpackname, location);

  // Generate Scheme inlines and cases-rule
  const opi::value recorddef = generate_record_definition(typesign, recordname,
                                                          mangledctor, fields,
                                                          cdr(ctorsign),
                                                          predname, output);
  const opi::value unpackdef = generate_unpack_definition(recorddef, unpackname);

  *output++ = list("pragma", "scheme-translator",
                    list("inline", unpackdef),
                    list("cases-rule", mangledctorsign, typesign, predname, unpackname));

  // Generate Prolog predicates
  const opi::value matchpred =
      list("predicate", list("match-on", mangledctorsign, typesign));

  *output++ = list("pragma", "prolog", matchpred);
}


template <std::output_iterator<opi::value> Output>
static void
generate_variant_type(opi::value typesign, opi::value variants, Output output,
                      const opi::source_location &location)
{
  for (const opi::value ctorsign : range(variants))
    generate_variant(typesign, ctorsign, output, location);
}


static opi::value
overloaded_getter_name(opi::value fieldname)
{
  const opi::value result = opi::sym(std::format("osl:#{}", fieldname));
  copy_location(fieldname, result);
  return result;
}

static opi::value
overloaded_setter_name(opi::value fieldname)
{
  const opi::value result = opi::sym(std::format("osl:#set-{}!", fieldname));
  copy_location(fieldname, result);
  return result;
}

template <std::output_iterator<opi::value> Output>
static void
generate_record_type(opi::value typesign, opi::value fields, Output output,
                     const opi::source_location &location)
{
  const opi::value recordname = issym(typesign) ? typesign : car(typesign);

  opi::value fieldnames = opi::nil;
  opi::value fieldtypes = opi::nil;
  for (const opi::value field : range(fields))
  {
    fieldnames = append(fieldnames, list(car(field)));
    fieldtypes = append(fieldtypes, list(car(cdr(field))));
  }

  const opi::value mangledname = opi::sym(std::format("osl:{}", recordname));
  const opi::value predname = opi::sym(std::format("{}?", mangledname));
  const opi::value type_name = opi::sym(std::format("<{}>", mangledname));
  set_location(mangledname, location);
  set_location(predname, location);
  set_location(type_name, location);
  const opi::value recorddef =
      generate_record_definition(typesign, type_name,
                                 mangledname, fieldnames, fieldtypes, predname,
                                 output);

  const opi::value define_overload = "define-overload";
  set_location(define_overload, location);
  const opi::value ctordef = list(define_overload, cons(recordname, fieldnames),
                                  cons(mangledname, fieldnames));
  *output++ = ctordef;

  for (const opi::value fieldname : range(fieldnames))
  {
    const auto [getter, setter] = field_accessors(recorddef, fieldname);
    const opi::value ovgetter = overloaded_getter_name(fieldname);
    const opi::value ovsetter = overloaded_setter_name(fieldname);
    const opi::value getterdef = list(define_overload, list(ovgetter, "x"), list(getter, "x"));
    const opi::value setterdef = list(define_overload, list(ovsetter, "x", "v"), list(setter, "x", "v"));
    set_location(getterdef, location);
    set_location(setterdef, location);
    *output++ = getterdef;
    *output++ = setterdef;
  }
}


static std::unordered_set<std::filesystem::path> g_included_files;

opi::value
load_file(const std::filesystem::path &path)
{
  const std::filesystem::path dirpath = path.parent_path();

  if (FILE *file = fopen(path.c_str(), "r"))
  {
    const std::filesystem::path curpath = std::filesystem::current_path();
    std::filesystem::current_path(dirpath);
    const opi::value result = opi::osl::parse(path, file, false);
    std::filesystem::current_path(curpath);

    fclose(file);

    return result;
  }
  else
    throw std::runtime_error {std::format("Failed to open file {} for reading", path.c_str())};
}



struct loop_unroller: public opi::osl::flow_unroller {
  std::string loopname, varname;
  opi::value breakform;

  loop_unroller(const std::string &loopname, const std::string &varname,
                opi::value breakform)
  : loopname {loopname}, varname {varname}, breakform {breakform}
  { }

  std::pair<opi::osl::flow, opi::value>
  make_return([[maybe_unused]] opi::value args) const override
  {
    throw opi::bad_code {"Unimplemented return from a loop"};
  }

  std::pair<opi::osl::flow, opi::value>
  make_break([[maybe_unused]] opi::value args) const override
  {
    using namespace opi;
    return {opi::osl::flow::branch, cons(breakform, args)};
  }

  std::pair<opi::osl::flow, opi::value>
  make_continue([[maybe_unused]] opi::value args) const override
  {
    using namespace opi;
    if (length(args) > 0)
      throw opi::bad_code {"Invalid continue with arguments"};
    return {opi::osl::flow::branch, list(sym(loopname), sym(varname))};
  }
};


%}

%code requires {
  #include "opium/value.hpp"
  #include "opium/source_location.hpp"

  using namespace opi;

  typedef void* yyscan_t;

  struct range_location {
    size_t left = 0, right = 0;
  };

}

%code {
  extern "C" int
  yylex(YYSTYPE *yylval_p, YYLTYPE *loc_p, yyscan_t yyscanner);

  void
  yyerror(YYLTYPE *loc_p, yyscan_t scnner, const char *what)
  {
    opi::source_location location;
    location.source = g_source;
    location.start = loc_p->left;
    location.end = loc_p->right;
    opi::error("parse error: {}\n{}", what, opi::display_location(location));
  }


}


// =============================================================================
//                                Tokens
%token REQUIRE
%token IDENT
%token CAPIDENT
%right MATCH IN RIGHT_ARROW OTHERWIZE
%token BEGIN_STRING STRING_CHUNK END_STRING
%token INTEGER FLOAT BOOLEAN
%token PRAGMA_
%token TYPE
%token SET
%token OF
%token FN
%token FOR BREAK CONTINUE

%right '|'

%nonassoc IF THEN
%right ELSE

%left '='

%right LET LETREC WHERE

%right FAT_RIGHT_ARROW

%right OR
%right AND
%nonassoc EQ NE
%nonassoc LT LE GT GE
%right ':'
%left '+' '-' '%'
%left '*' '/'
%left NOT
%nonassoc TYPE_ANNOTATION
%left '.' '#'

// =============================================================================
//                              Structures
%type ApplExpr Expr
%type ListOfExprs
%type SeqOfExprs
%type TopLvlExpr
%type Match MatchClause MatchClauses
%type AtomPattern ExprPattern ListOfExprPatterns
%type String StringChunks
%type Bind ListOfBinds
%type Ctor
%type TopLvlSeq TopLvlExpr
%type TypeDef TypeSign CtorSign ListOfCtorSigns TypeParam ListOfTypeParams ListOfFields
%type If
%type Lambda
%type ExprWithOptTypeParam

%nonassoc AFTER_APPLY
%left APPLY
// -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
%start Entry


%%

Entry
  : TopLvlSeq { *g_result_ptr = $1; }
;

String
  : BEGIN_STRING StringChunks END_STRING {
    std::string result;
    for (const value chunk : range($2))
      std::ranges::copy(str_view(chunk), std::back_inserter(result));
    $$ = str(result);
    bindloc($$, @$);
  }
;

StringChunks
  : { $$ = nil; }
  | STRING_CHUNK StringChunks { $$ = cons($1, $2); }
;

ApplExpr
  : IDENT
  | INTEGER
  | FLOAT
  | BOOLEAN
  | String { $$ = $1; bindloc($$, @$); }
  | '{' SeqOfExprs '}' { $$ = cons("begin", $2); bindloc($$, @$); }
  | '[' ListOfExprs ']' %prec AFTER_APPLY {
    if (length($2) > 0)
      $$ = cons("oslops:list", $2);
    else
      $$ = list(mangle_type_constructor("EmptyList"));
    bindloc($$, @$);
  }
  | '+' { $$ = "+"; bindloc($$, @$); }
  | '-' { $$ = "-"; bindloc($$, @$); }
  | '*' { $$ = "*"; bindloc($$, @$); }
  | '/' { $$ = "/"; bindloc($$, @$); }
  | '%' { $$ = "%"; bindloc($$, @$); }
  | EQ { $$ = "=="; bindloc($$, @$); }
  | NE { $$ = "!="; bindloc($$, @$); }
  | GT { $$ = ">"; bindloc($$, @$); }
  | LT { $$ = "<"; bindloc($$, @$); }
  | GE { $$ = ">="; bindloc($$, @$); }
  | LE { $$ = "<="; bindloc($$, @$); }
  | ApplExpr '(' ListOfExprs ')' %prec APPLY { $$ = cons($1, $3); bindloc($$, @$); }
  | '(' Expr ')' %prec AFTER_APPLY { $$ = $2; }
  | ApplExpr '.' IDENT '(' ListOfExprs ')' {
    $$ = list($3, $1, dot, $5);
    bindloc($$, @$);
  }
  | ApplExpr '#' IDENT { $$ = list(overloaded_getter_name($3), $1); }
  | ApplExpr '[' Expr ']' %prec APPLY {
    const value getter = random_access_getter();
    bindloc(getter, @$);
    $$ = list(getter, $1, $3);
  }
;

Expr
  : ApplExpr
  | Ctor '(' ListOfExprs ')' %prec APPLY { $$ = cons($1, $3); bindloc($$, @$); }
  | SET IDENT '=' Expr { const value set = "set!"; bindloc(set, @1); $$ = list(set, $2, $4); }
  | SET ApplExpr '[' Expr ']' '=' Expr {
    const value setter = random_access_setter();
    bindloc(setter, @1);
    $$ = list(setter, $2, $4, $7);
  }
  | SET ApplExpr '#' IDENT '=' Expr {
    const value setter = overloaded_setter_name($4);
    bindloc(setter, @1);
    $$ = list(setter, $2, $6);
  }
  | Expr '=' Expr {
    const value define = issym($1) ? "define" : "define-overload";
    bindloc(define, @$);
    $$ = list(define, $1, $3);
  }
  | Expr ':' Expr { const value op = "cons"; bindloc(op, @$); $$ = list(op, $1, $3); }
  | Expr '+' Expr { const value op = "+"; bindloc(op, @$); $$ = list(op, $1, $3); }
  | Expr '-' Expr { const value op = "-"; bindloc(op, @$); $$ = list(op, $1, $3); }
  | Expr '*' Expr { const value op = "*"; bindloc(op, @$); $$ = list(op, $1, $3); }
  | Expr '/' Expr { const value op = "/"; bindloc(op, @$); $$ = list(op, $1, $3); }
  | Expr '%' Expr { const value op = "%"; bindloc(op, @$); $$ = list(op, $1, $3); }
  | Expr EQ Expr { const value op = "=="; bindloc(op, @$); $$ = list(op, $1, $3); }
  | Expr NE Expr { const value op = "!="; bindloc(op, @$); $$ = list(op, $1, $3); }
  | Expr GT Expr { const value op = ">"; bindloc(op, @$); $$ = list(op, $1, $3); }
  | Expr LT Expr { const value op = "<"; bindloc(op, @$); $$ = list(op, $1, $3); }
  | Expr GE Expr { const value op = ">="; bindloc(op, @$); $$ = list(op, $1, $3); }
  | Expr LE Expr { const value op = "<="; bindloc(op, @$); $$ = list(op, $1, $3); }
  | Expr AND Expr { const value op = "and"; bindloc(op, @$); $$ = list(op, $1, $3); }
  | Expr OR Expr { const value op = "or"; bindloc(op, @$); $$ = list(op, $1, $3); }
  | NOT Expr { $$ = list("not", $2); bindloc(car($$), @1); }
  | Expr ':' ':' TypeParam %prec TYPE_ANNOTATION { $$ = list("annotate-type", $1, $4); }
  | Lambda
  | If
  | Match
  | LET ListOfBinds IN Expr { $$ = list("let", $2, $4); }
  | LETREC ListOfBinds IN Expr { $$ = list("letrec", $2, $4); }
  | Expr WHERE ListOfBinds { $$ = list("letrec", $3, $1); }
  | PRAGMA_ IDENT STRING_CHUNK {
    lisp_parser parser;
    assert(isstr($3));
    std::istringstream buf {std::string(str_view($3))};
    $$ = list("pragma", $2, dot, parser.parse_all(buf));
  }
  | BREAK %prec AFTER_APPLY { $$ = list("break"); bindloc($$, @$); }
  | BREAK '(' ListOfExprs ')' %prec APPLY { $$ = cons("break", $3); bindloc($$, @$); }
  | CONTINUE %prec AFTER_APPLY { $$ = list("continue"); }
  | FOR IDENT IN Expr Expr {
    loop_unroller unroller {"<loop>", "<it>", "void"};

    const value Nothing = mangle_type_constructor("Nothing");
    const value Some = mangle_type_constructor("Some");

    const value ifpat = list(Some, $2);
    const value thenblock = list($5, list("<loop>", "<it>"));
    const value thenbr = unroller.unroll_block(thenblock, nil, nil).second;
    const value ifclause = cons(list(ifpat), thenbr);
    const value elsepat = list(Nothing);
    const value elsebr = list(list("void"));
    const value elseclause = cons(list(elsepat), elsebr);
    const value expr = list("next", "<it>");

    const value loopbody = list("cases", list(expr), ifclause, elseclause);
    const value lambda = list("lambda", list("<it>"), loopbody);
    $$ = list("letrec", list(list("<loop>", lambda)), list("<loop>", $4));
  }
  | FOR IDENT IN Expr Expr ELSE Expr {
    loop_unroller unroller {"<loop>", "<it>", "values"};

    const value Nothing = mangle_type_constructor("Nothing");
    const value Some = mangle_type_constructor("Some");

    const value ifpat = list(Some, $2);
    const value thenblock = list($5, list("<loop>", "<it>"));
    const value thenbr = unroller.unroll_block(thenblock, nil, nil).second;
    const value ifclause = cons(list(ifpat), thenbr);
    const value elsepat = list(Nothing);
    const value elsebr = list($7);
    const value elseclause = cons(list(elsepat), elsebr);
    const value expr = list("next", "<it>");

    const value loopbody = list("cases", list(expr), ifclause, elseclause);
    const value lambda = list("lambda", list("<it>"), loopbody);
    $$ = list("letrec", list(list("<loop>", lambda)), list("<loop>", $4));
  }
;

Lambda
  : '(' ListOfExprs ')' FAT_RIGHT_ARROW Expr { $$ = list("lambda", $2, $5); }
  | IDENT FAT_RIGHT_ARROW Expr { $$ = list("lambda", list($1), $3); }
;

If
  : IF Expr THEN Expr ELSE Expr { $$ = list("if", $2, $4, $6); }
  | IF Expr THEN Expr { $$ = list("if", $2, $4); }
;

Match
  : MATCH ListOfExprs IN MatchClauses {
    // Fix otherwize-clause
    value newclauses = nil;
    const size_t ncols = length($2);
    for (const value clause : range($4))
    {
      if (car(car(clause)) == "otherwize")
      {
        const auto makewild = []() { return sym("_"); };
        opi::stl::vector<value> newpat;
        std::ranges::generate_n(std::back_inserter(newpat), ncols, makewild);
        const value newclause = cons(list(newpat), cdr(clause));
        newclauses = append(newclauses, list(newclause));
      }
      else
        newclauses = append(newclauses, list(clause));
    }
    bindloc(newclauses, @4);
    const value cases = "cases";
    bindloc(cases, @1);
    $$ = list(cases, $2, dot, newclauses);
  }
;

SeqOfExprs
  : { $$ = nil; }
  | Expr SeqOfExprs %prec AFTER_APPLY { $$ = cons($1, $2); }
;

TopLvlSeq
  : { $$ = nil; }
  | TopLvlExpr TopLvlSeq %prec AFTER_APPLY { $$ = append($1, $2); }
;

TopLvlExpr
  : Expr { $$ = list($1); }
  | TypeDef
  | REQUIRE String {
    std::filesystem::path fullpath = std::filesystem::absolute(str_view($2));
    if (fullpath.extension() == "")
      fullpath += ".osl";
    if (g_included_files.contains(fullpath))
      $$ = nil;
    else
    {
      g_included_files.emplace(fullpath);
      $$ = load_file(fullpath);
    }
  }
;

TypeDef
  : TYPE TypeSign '=' ListOfCtorSigns {
    opi::stl::vector<value> tape;
    source_location location;
    location.source = g_source;
    location.start = @$.left;
    location.end = @$.right;
    generate_variant_type($2, $4, std::back_inserter(tape), location);
    $$ = list(tape);
    bindloc($$, @$);
  }
  | TYPE TypeSign '=' '{' ListOfFields '}' {
    opi::stl::vector<value> tape;
    
    opi::source_location location;
    location.source = g_source;
    location.start = @$.left;
    location.end = @$.right;
    generate_record_type($2, $5, std::back_inserter(tape), location);
    $$ = list(tape);
    bindloc($$, @$);
  }
;

TypeSign
  : IDENT %prec AFTER_APPLY
  | IDENT '(' ListOfTypeParams ')' %prec APPLY { $$ = cons($1, $3); bindloc($$, @$); }
  | FN '(' ListOfTypeParams ')' RIGHT_ARROW TypeParam {
    const value fn = "fn";
    bindloc(fn, @1);
    $$ = list(fn, $3, $6);
  }
;

ListOfCtorSigns
  : CtorSign { $$ = list($1); }
  | CtorSign '|' ListOfCtorSigns { $$ = cons($1, $3); }
;

CtorSign
  : CAPIDENT '(' ListOfTypeParams ')' {
    $$ = cons($1, $3);
};

ListOfTypeParams
  : { $$ = nil; }
  | TypeParam { $$ = list($1); }
  | TypeParam ',' ListOfTypeParams { $$ = cons($1, $3); }
;

TypeParam
  : CAPIDENT
  | TypeSign
;

ListOfFields
  : { $$ = nil; }
  | IDENT TypeParam { $$ = list(list($1, $2)); }
  | IDENT TypeParam ',' ListOfFields { $$ = cons(list($1, $2), $4); }
;

/*ListOfExprs*/
  /*: { $$ = nil; }*/
  /*| Expr { $$ = list($1); }*/
  /*| Expr ',' ListOfExprs { $$ = cons($1, $3); }*/
/*;*/

ListOfExprs
  : { $$ = nil; }
  | ExprWithOptTypeParam { $$ = list($1); }
  | ExprWithOptTypeParam ',' ListOfExprs { $$ = cons($1, $3); }
;

ExprWithOptTypeParam
  : Expr
  | Expr TypeParam { $$ = list($1, $2); }
;


MatchClauses
  :  MatchClause { $$ = list($1); }
  |  MatchClause MatchClauses { $$ = cons($1, $2); }
;

MatchClause
  : '|' ListOfExprPatterns RIGHT_ARROW Expr { $$ = cons($2, list($4)); }
;

ListOfExprPatterns
  : { $$ = nil; }
  | ExprPattern { $$ = list($1); }
  | ExprPattern ',' ListOfExprPatterns { $$ = cons($1, $3); }
;

ExprPattern
  : AtomPattern
  | ExprPattern ':' ExprPattern {
    const value Cons = mangle_type_constructor("Cons");
    bindloc(Cons, @$);
    $$ = list(Cons, $1, $3);
  }
;

AtomPattern
  : IDENT
  | '(' ExprPattern ')' { $$ = $2; }
  | Ctor '(' ListOfExprPatterns ')' { $$ = cons($1, $3); }
  | '[' ']' {
    const value EmptyList = mangle_type_constructor("EmptyList");
    bindloc(EmptyList, @$);
    $$ = list(EmptyList);
  }
  | OTHERWIZE { $$ = "otherwize"; bindloc($$, @$); }
;


ListOfBinds
  : Bind { $$ = list($1); }
  | Bind ',' ListOfBinds { $$ = cons($1, $3); }
;

Bind
  : IDENT '=' Expr { $$ = list($1, $3); }
  | IDENT '(' ListOfExprs ')' '=' Expr {
    const value lambda = "lambda";
    bindloc(lambda, @$);
    const value lambdaexpr = list(lambda, $3, $6);
    $$ = list($1, lambdaexpr);
  }
;

Ctor
  : CAPIDENT { $$ = mangle_type_constructor($1); }
;

%%

typedef void* yyscan_t;

extern int
yylex_init(yyscan_t *scanner);

extern void
yyset_in(FILE *in, yyscan_t scanner);

extern void
yylex_destroy(yyscan_t scanner);


static void
bindloc(opi::value val, const range_location &loc)
{
  opi::source_location location;
  location.source = g_source;
  location.start = loc.left;
  location.end = loc.right;
  opi::set_location(val, location);
}

opi::source_location
make_location(const range_location &loc)
{
  opi::source_location location;
  location.source = g_source;
  location.start = loc.left;
  location.end = loc.right;
  return location;
}

namespace opi::osl {

opi::value
parse(const std::string &source, std::FILE *file, bool is_root)
{
  opi::utl::state_saver _ {g_fileoffs_left, g_fileoffs_right, g_source};
  g_fileoffs_left = 0;
  g_fileoffs_right = 0;
  g_source = source;

  opi::value result;

  opi::value *result_ptr_save = &result;
  std::swap(result_ptr_save, g_result_ptr);

  if (is_root)
    g_included_files.clear();

  yyscan_t scanner;
  yylex_init(&scanner);
  yyset_in(file, scanner);
  yyparse(scanner);
  yylex_destroy(scanner);

  std::swap(result_ptr_save, g_result_ptr);

  lisp_parser parser;

  if (is_root)
  {
    // Load auxiliary definitions used in syntax
    const value header = parser.parse_all(osl_syntax_definitions);
    result = append(header, result);
  }

  return result;
}

} // namespace opi::osl
