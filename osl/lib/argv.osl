
#pragma scheme-translator {
  (inline
    (cond-expand
      (chicken
        (import (chicken process-context))
        (define commandline command-line-arguments))))
}
#pragma prolog {
  (predicate (result-of (commandline) (list str)))
}

argv = commandline()

 

#pragma scheme-translator {
  (inline
    (import getopt-long)
    (import alist-lib)

    (define-record-type getopt-option
      (getopt-option NAME DOCSTRING PROPERTIES HANDLE)
      getopt-option?
      (NAME getopt-option-name)
      (DOCSTRING getopt-option-docstring)
      (PROPERTIES getopt-option-properties)
      (HANDLE getopt-option-handle))

    (define (osl_make_getopt_option NAME)
      (getopt-option (string->symbol NAME) #f (quote ()) #f))

    (define (osl_set_getopt_option_docstring OPTION DOCSTRING)
      (getopt-option (getopt-option-name OPTION)
                     DOCSTRING
                     (getopt-option-properties OPTION)
                     (getopt-option-handle OPTION)))

    (define (osl_add_getopt_option_required OPTION REQUIRED?)
      (getopt-option (getopt-option-name OPTION)
                     (getopt-option-docstring OPTION)
                     (cons (list (quote required) REQUIRED?)
                           (getopt-option-properties OPTION))
                     (getopt-option-handle OPTION)))

    (define (osl_add_getopt_option_value OPTION VALUE?)
      (getopt-option (getopt-option-name OPTION)
                     (getopt-option-docstring OPTION)
                     (cons (list (quote value) VALUE?)
                           (getopt-option-properties OPTION))
                     (getopt-option-handle OPTION)))

    (define (osl_add_getopt_option_handler OPTION HANDLE)
      (getopt-option (getopt-option-name OPTION)
                     (getopt-option-docstring OPTION)
                     (getopt-option-properties OPTION)
                     HANDLE))

    (define (getopt-option->list OPTION)
      (let* ((head (list (getopt-option-name OPTION)
                         (getopt-option-docstring OPTION)))
             (tail (getopt-option-properties OPTION))
             (finallist (append head tail)))
        finallist))

    (define (call-getopt-option-handle OPTION VALUESTRING)
      ((getopt-option-handle OPTION) VALUESTRING))

    (define (osl_help OPTIONS)
      (usage (map getopt-option->list OPTIONS)))

    (define (osl_getopt ARGUMENTS OPTIONS)
      ;; Check that all options have the handle set up
      (when (not (every getopt-option-handle OPTIONS))
        (error "Option without handle"))
      ;; Parse options, run handles on the keyword arguments and return
      ;; positional arguments as a list of string
      (let* ((result (getopt-long ARGUMENTS (map getopt-option->list OPTIONS)))
             (posargs (assq (quote @) result))
             (kvargs (remove (lambda (x) (eq? (car x) (quote @))) result))
             (posargslist (if posargs (cdr posargs) (list))))
        ;; Run handles on all of the keyword arguments
        (alist-map (lambda (OPTION VALUE)
                     (let ((option (find (lambda (x) (eq? (getopt-option-name x) OPTION)) OPTIONS)))
                       (call-getopt-option-handle option VALUE)))
                   kvargs)
        ;; And return positional arguments as they are
        posargslist))
  )
}
#pragma prolog {
  (predicate (result-of (osl_make_getopt_option str) getopt_option))
  (predicate (result-of (osl_set_getopt_option_docstring getopt_option str) getopt_option))
  (predicate (result-of (osl_add_getopt_option_required getopt_option bool) getopt_option))
  (predicate (result-of (osl_add_getopt_option_value getopt_option bool) getopt_option))
  (predicate (result-of (osl_add_getopt_option_handler getopt_option Handler) getopt_option)
    (result-of (Handler str) _))
  (predicate (result-of (osl_getopt (list str) (list getopt_option)) (list str)))
  (predicate (result-of (osl_help (list getopt_option)) str))
}

option(name str) = osl_make_getopt_option(name)
docstring(opt getopt_option, docstr str) =
  osl_set_getopt_option_docstring(opt, docstr)
required(opt getopt_option, yesno bool) =
  osl_add_getopt_option_required(opt, yesno)
value(opt getopt_option, yesno bool) =
  osl_add_getopt_option_value(opt, yesno)
handle(opt getopt_option, f) =
  osl_add_getopt_option_handler(opt, f)

getopt = osl_getopt
help = osl_help
