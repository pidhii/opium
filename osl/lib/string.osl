require "itertools"
require "error"

////
//
// Builtin operations with strings
//
#pragma scheme-translator {
  (inline
    (import (chicken string))

    (define strcat string-append)

    (define strref string-ref)
    (define strlen string-length)

    (define streq string=?)
    (define strlt string<?)
    (define strle string<=?)
    (define strgt string>?)
    (define strge string>=?)

    (define strcieq string=?)
    (define strcilt string<?)
    (define strcile string<=?)
    (define strcigt string>?)
    (define strcige string>=?)

    (define str2list string->list)
    (define (str2num STRING)
      (let ((result (string->number STRING)))
        (if result
          (oslctor:Some result)
          (oslctor:Nothing))))

    (define osl_string_chomp string-chomp))
}
//
#pragma prolog {
  (ensure-loaded "prolog-std.scm")

  ;; Type signatures for the renamed functions
  (predicate (result-of (strcat . Strs) str) (all str Strs))

  (predicate (result-of (strref str num) char))
  (predicate (result-of (strlen str) num))

  (predicate (result-of (streq str str) bool))
  (predicate (result-of (strlt str str) bool))
  (predicate (result-of (strle str str) bool))
  (predicate (result-of (strgt str str) bool))
  (predicate (result-of (strge str str) bool))

  (predicate (result-of (strcieq str str) bool))
  (predicate (result-of (strcilt str str) bool))
  (predicate (result-of (strcile str str) bool))
  (predicate (result-of (strcigt str str) bool))
  (predicate (result-of (strcige str str) bool))

  (predicate (result-of (str2list str) (list char)))
  (predicate (result-of (str2num str) (maybe num)))

  (predicate (result-of (osl_string_chomp . Args) str)
    (or (= Args (str))
        (= Args (str str))))
}

// STRING + STRING -> str
//
// Concatenate two strings
s1 + s2 = strcat(s1, s2)

// STRING[INDEX] -> char
//
// String element access
s[k] = strref(s, k)

// STRING <cmp-op> STRING -> bool
//
// String comparison operators
s1 == s2 = streq(s1, s2)
s1 != s2 = not streq(s1, s2)
s1 < s2 = strlt(s1, s2)
s1 > s2 = strgt(s1, s2)
s1 <= s2 = strle(s1, s2)
s1 >= s2 = strge(s1, s2)

// lenght(STRING) -> num
//
// String length
length(s str) = strlen(s)

str(s str) = s
list(s str) = str2list(s)
parse(s str) = str2num(s)
num(s str) = match str2num(s) in
| Some(value) -> value
| otherwize   -> error("Not a number", s)

// chomp(STRING) -> str
// chomp(STRING, SUFFIX) -> str
//
// If STRING ends with SUFFIX, then this procedure returns a copy of its first
// argument with the suffix removed, otherwise returns STRING unchanged.
// SUFFIX defaults to "\n".
chomp = osl_string_chomp


join(it, sep str) =
  match next(it) in
  | Some(x) -> it.foldl(x, (acc, x) => acc + sep + x)
  | otherwize -> ""

