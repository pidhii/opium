require "base"
require "error"
require "number"



////////////////////////////////////////////////////////////////////////////////
//                             iteration
//
foreach(it, f) = match next(it) in
| Some(x) -> { f(x) foreach(it, f) }
| Nothing -> void()


foldl(it, z, f) = match next(it) in
| Some(x) -> foldl(it, f(z, x), f)
| otherwize -> z


/////////////////////////////////////////////////////////////////////////////////
//                                search
//
find(it, p) = match next(it) in
| Some(x) -> if p(x) then Some(x) else find(it, p)
| Nothing -> Nothing


////////////////////////////////////////////////////////////////////////////////
//                           map - iterator
//
type mapIterator(Iter, T, U) = {
  inner Iter,
  func  fn(T) -> U,
}

next(it mapIterator(Iter, T, U)) =
  cuttypecheck(
    match next(it#inner) in
    | Some(x) -> Some(it#func(x))
    | Nothing -> Nothing
  )

map(it, f) = mapIterator(it, coerce(f))
// map(it, f) = generator { for x in it do yield f(x) }


////////////////////////////////////////////////////////////////////////////////
//                           while - iterator
//
type whileIterator(Iter, T) = {
  inner Iter,
  pred fn(T) -> bool,
  isdone bool,
}

next(it whileIterator(Iter, T)) =
  cuttypecheck(
    if it#isdone then Nothing
    else match next(it#inner) in
    | Some(x) -> if it#pred(x) then Some(x) else { set it#isdone = true Nothing }
    | otherwize -> Nothing
  )

while(it, p) = whileIterator(it, coerce(p), false)


////////////////////////////////////////////////////////////////////////////////
//                           take - iterator
//
type take(Iter) = {
  inner Iter,
  n num
}

next(it take(Iter)) =
  cuttypecheck(
    let n = it#n in
    if n <= 0 then Nothing
    else match next(it#inner) in
    | Some(x) -> { set it#n = n - 1 Some(x) }
    | otherwize -> { set it#n = 0 Nothing }
  )


////////////////////////////////////////////////////////////////////////////////
//                                 drop
//
drop(it, n num) =
  if n <= 0 then { next(it) drop(it, n - 1) }
  else Nothing


////////////////////////////////////////////////////////////////////////////////
//                         filter - iterator
//
type filterIterator(Iter, T) = {
  inner Iter,
  pred  fn(T) -> bool,
}

next(it filterIterator(Iter, T)) =
  cuttypecheck(
    match next(it#inner) in
    | Some(x) -> if it#pred(x) then Some(x) else next(it)
    | otherwize -> Nothing
  )

filter(it, pred) = filterIterator(it, coerce(pred))


////////////////////////////////////////////////////////////////////////////////
//                         range - iterator
//
type rangeIterator() = { from num, to num }

next(it rangeIterator()) = {
  result = it#from
  if result < it#to then
  {
    set it#from = result + 1
    return cuttypecheck(Some(result))
  }
  else
    return cuttypecheck(Nothing)
}

iter(r range(T)) = rangeIterator(r#start, r#end)
