
#pragma scheme-translator {
  (inline
    (cond-expand
      (guile (import (srfi :9) (srfi :11)))
      (chicken)))
}

////
//
// Builtin basic functions
//
#pragma prolog {
  (predicate (result-of (not _) bool))
  (predicate (result-of ((parameter T) T) void))
  (predicate (result-of ((parameter T)) T))
}

////
//
// Define cons-list:
//
//   type list(T) = Cons(T, list(T))
//                | EmptyList()
//
#pragma prolog {
  (ensure-loaded "prolog-std.scm")

  ;; Constructor types
  (predicate (result-of (oslctor:Cons T (list T)) (list T)))
  (predicate (result-of (oslctor:EmptyList) (list _)))

  ;; Rules for type-cases
  (predicate (match-on (oslctor:Cons T (list T)) (list T)))
  (predicate (match-on (oslctor:EmptyList) (list _)))

  ;; Builtin Scheme functions for lists
  (predicate (result-of (car (list T)) T))
  (predicate (result-of (cdr (list T)) (list T)))
}
extern cons(T, list(T)) -> list(T)
x::T : xs::list(T) = cons(x, xs)
//
#pragma scheme-translator {
  ;; Rules for translation of cases expressions with list
  (cases-rule (oslctor:Cons _ _) (list _) pair? unpack-pair)
  (cases-rule (oslctor:EmptyList) (list _) null? <unused>) ;; nothing to unpack

  ;; Inline auxiliary functions to avoid type-check and name mangling
  (inline
    (define (unpack-pair p) (values (car p) (cdr p)))
    (define oslctor:Cons cons)
    (define (oslctor:EmptyList) '())
    (define osl_list list)
  )
}

type maybe(T) = Some(T) | Nothing()

require "error"
unpack(x maybe(T)) = match x in
| Some(value) -> value
| Nothing()   -> error("Unpack Nothing()")

expect(x maybe(T), message str) = match x in
| Some(value) -> value
| Nothing()   -> error(message)

unpack_or(x maybe(T), default T) = match x in
| Some(value) -> value
| Nothing()   -> default

bool(x maybe(T)) = match x in
| Some(value) -> true
| Nothing()   -> false


// class unaryFn(A, R) = assert {
//   Self(A) :: R
// }



////
//
// Function type coercion
//
#pragma prolog {
  (predicate (result-of ((fn Args Result) . Args) Result))

  ;; NOTE: can't use coerce-predicate directly
  (predicate (result-of (coerce Fn) (fn Args Result))
    (result-of (Fn . Args) Result))


  ;(predicate (coerce Fn (fn Args Result))
  ;  (result-of (Fn . Args) Result))
  (predicate (coerce T U)
    (result-of (coerce T) U))
}
#pragma scheme-translator { (inline (define (coerce x) x)) }


extern identifier!(string->symbol) as sym(str) -> sym
extern identifier!(symbol->string) as str(sym) -> str

////////////////////////////////////////////////////////////////////////////////
//                               meta
//
// Every iterator is also an *iterable*
iter(it) = {
  assert { next(it) :: maybe(T) }
  return it
}

// reinterpret_cast
#pragma scheme-translator {
  (inline
    (define (reinterpret_cast x) x))
}
extern reinterpret_cast(_) -> _

// Type-case into `anything`
anything(x) = reinterpret_cast(x) :: anything


////////////////////////////////////////////////////////////////////////////////
//                       builtin parameters
//
extern identifier!(exit-handler) as exit_handler :: fn(num) -> _
// extern identifier!(reset-handler) as reset_handler :: fn() -> _
// extern identifier!(program-name) as program_name :: str


////////////////////////////////////////////////////////////////////////////////
//                            ranges
//
type range(T) = {start T, end T}
(a::T) : (b::T) = range(a, b)


////////////////////////////////////////////////////////////////////////////////
//                           miscelanious
//
// Cut Prolog query
#pragma prolog { (predicate (result-of (cuttypecheck T) T) !) }
#pragma scheme-translator { (inline (define (cuttypecheck x) x)) }
