require "osl-config" // generated during build; contains `default_oslpath`


type mode = Run | Compile(str)

////////////////////////////////////////////////////////////////////////////////
//                   Process command-line arguments
//
// Default options
mode = Run       // Default mode (run without compilation)
optimize = false // Default optimization settings (dont optimize compilation target)
verbose = false  // Default verbosity (silent)
gdb = false
tracelen = 20

// Parse command-line
args = getopt(argv, options)
where options = [
  // --help,-h
  option("help")
    .short("h")
    .docstring("print help and exit")
    .handle(_ => {
      println("usage: opium-osl [OPTIONS] <INPUT-FILE>")
      println("")
      println("OPTIONS:")
      println(help(options))
      exit(0)
    })
  ,
  // --verbose,-v
  option("verbose")
    .short("v")
    .docstring("enable verbose output")
    .handle(_ => set verbose = true)
  ,
  // --run,-r
  option("run")
    .short("r")
    .docstring("run the script without compilation (default)")
    .handle(_ => set mode = Run)
  ,
  // --compile,-c <output-filename>
  option("compile")
    .short("c")
    .docstring("compile the script into executable file")
    .value("OUTPUT-FILE")
    .handle(output_filename => set mode = Compile(output_filename))
  ,
  // --optimize,-O
  option("optimize")
    .short("O")
    .docstring("enable optimizations during compilation")
    .handle(_ => set optimize = true)
  ,
  // --gdb
  option("gdb")
    .docstring("run osl with GDB")
    .handle(_ => set gdb = true)
  ,
  option("trace-length")
    .value("TRACE-LENGTH")
    .handle(x => set tracelen = num(x))
]

// Expecting at least a single position argument which is the input filename
if length(args) < 1 then
  error("input file not specified")
input = args[0]


////////////////////////////////////////////////////////////////////////////////
//                             Helper functions
//
info(message) =
{
  if verbose then
    println("opium-osl ", message)
}

// Translate OSL into Scheme
translate_opium_script(osl_filename, scm_filename) =
{
  // Resolve path for OSL modules
  info("translating OSL into Scheme")
  command = format("./install/bin/osl -o ~A --oslpath ~A --trace-length ~A ~A",
                   scm_filename, default_oslpath, tracelen, osl_filename)
  if gdb then
  {
    system("gdb --args " + command)
    return
  }

  if verbose then
   info("executing command: " + command)
  p = run(command)
  rc = p.wait()#status
  if rc != 0 then
  {
    p#stderr.lines().foreach(println)
    eprintln("OSL translation failed")
    exit(1)
  }
  else if verbose then
    p#stderr.lines().foreach(println)
}

// Run Scheme with Chicken Scheme interpreter
run_scheme(scm_filename) =
{
  info("evaluating Scheme script with Chicken interpreter")
  cmdline_args_string = cdr(args).iter().join(" ")
  return system("chicken-csi -s " + scm_filename + " " + cmdline_args_string)
}

// Compile Scheme with Chicken Scheme compiler
compile_scheme(scm_filename, output_filename) =
{
  compile_flags = "-strict-types -o " + output_filename
  if optimize then
    set compile_flags = compile_flags + " -O5 -local -no-bound-checks -no-procedure-checks -no-argc-checks"

  info("compiling Scheme script with Chicken compiler")
  return system("chicken-csc " + compile_flags + " " + scm_filename)
}


////////////////////////////////////////////////////////////////////////////////
//                                Main
//
scm_filename = run("mktemp")#stdout.read().unpack().chomp() // temporary file to store Scheme script
translate_opium_script(input, scm_filename)
match mode in
| Run -> run_scheme(scm_filename)
| Compile(output_filename) -> compile_scheme(scm_filename, output_filename)
