////
//
// Builtin operations with strings
//
#pragma scheme-translator {
  (inline
    (define strcat string-append)

    (define strref string-ref)
    (define strlen string-length)

    (define streq string=?)
    (define strlt string<?)
    (define strle string<=?)
    (define strgt string>?)
    (define strge string>=?)

    (define strcieq string=?)
    (define strcilt string<?)
    (define strcile string<=?)
    (define strcigt string>?)
    (define strcige string>=?)

    (define str2list string->list))
}
//
#pragma prolog {
  (ensure-loaded "prolog-std.scm")

  ;; Type signatures for the renamed functions
  (predicate (result-of (strcat . Strs) str) (all str Strs))

  (predicate (result-of (strref str num) char))
  (predicate (result-of (strlen str) num))

  (predicate (result-of (streq str str) bool))
  (predicate (result-of (strlt str str) bool))
  (predicate (result-of (strle str str) bool))
  (predicate (result-of (strgt str str) bool))
  (predicate (result-of (strge str str) bool))

  (predicate (result-of (strcieq str str) bool))
  (predicate (result-of (strcilt str str) bool))
  (predicate (result-of (strcile str str) bool))
  (predicate (result-of (strcigt str str) bool))
  (predicate (result-of (strcige str str) bool))

  (predicate (result-of (str2list str) (list char)))
}

// String concatenation
s1 + s2 = strcat(s1, s2)

// String element access
s[k] = strref(s, k)

// String comparison
s1 == s2 = streq(s1, s2)
s1 != s2 = not streq(s1, s2)
s1 < s2 = strlt(s1, s2)
s1 > s2 = strgt(s1, s2)
s1 <= s2 = strle(s1, s2)
s1 >= s2 = strge(s1, s2)

// Common container methods
length(s str) = strlen(s)

list(s str) = str2list(s)
string(s str) = s

join(it, sep str) =
  match next(it) in
  | Some(x) -> it.foldl(x, (acc, x) => acc + sep + x)
  | otherwize -> ""
