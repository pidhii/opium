#!/usr/bin/env bash

set -e


function print_help_and_exit
{
  echo help
  exit $1
}


run=false
target=script
save=false
while getopts "hsct:Sr" opt; do
  case "$opt" in
    h) print_help_and_exit 0 ;;
    S) save=true ;;
    r) run=true ;;
    t) target="$OPTARG" ;;
    s) target=script ;;
    c) target=compile ;;
  esac
done

shift $((OPTIND - 1))
input_file=${1?missing input file}
shift


if $save; then
  osl_output="${input_file//osl/opi}"
  opium_output="${input_file//osl/scm}"
else
  osl_output="$(mktemp)"
  opium_output="$(mktemp)"
fi

function @
{
  echo $ $@ >&2
  $@
}


@ ./install/bin/osl "$input_file" >"$osl_output"
@ ./install/bin/opium "$osl_output" -o "$opium_output" $@


function make_script
{
  if $run; then
    @ guile "$opium_output"
    return
  fi

  local output_path

  output_path="${input_file//osl/scm}"
  @ cp "$opium_output" "$output_path"

  cat <<EOM
Scheme script written to $output_path
You can run the script with interpreter of your choice:
- run with Guile (main Scheme implementation of the GNU project)
  $ guile $output_path
- run with CHICKEN
  $ chicken-csi -s $output_path
EOM
}


function make_chicken
{
  local chicken_output chicken_opium_args chicken_opt_args

  if $run; then
    chicken_output="$(mktemp)"
  else
    chicken_output="${input_file//.osl/}"
  fi

  chicken_opium_args=()
  chicken_opt_args=(-O5 -local -no-bound-checks -no-procedure-checks -no-argc-checks)
  @ chicken-csc ${chicken_opium_args[*]} ${chicken_opt_args[*]} -output-file "$chicken_output" "$opium_output"

  if $run; then
    @ $chicken_output
  else
    echo
    echo "Executable written to $chicken_output"
  fi
}


case "$target" in
  script) make_script ;;
  compile) make_chicken ;;
esac

if test -f TypeCheck.scm; then
  ./remove-colors TypeCheck.scm
fi

if test ! $save; then
  rm "$osl_output" "$opium_output"
fi
