require "io"

type json = JsonStructure(dict(str, json))
          | JsonArray(list(json))
          | JsonNumber(num)
          | JsonString(str)
          | JsonNull()

#pragma scheme-translator {
  (inline
    (import json)

    (define (scm->json obj)
      (cond ((vector? obj)
              (let* ((objl (vector->list obj))
                     (kv->json (lambda (kv) (cons (car kv) (scm->json (cdr kv)))))
                     (newlist (map kv->json objl)))
                (oslctor:JsonStructure (alist->hash-table newlist))))
            ((pair? obj) (oslctor:JsonArray (map scm->json obj)))
            ((null? obj) (oslctor:JsonArray obj))
            ((number? obj) (oslctor:JsonNumber obj))
            ((string? obj) (oslctor:JsonString obj))
            (else (error "Unsupported JSON object" obj))))

    (define (json->scm obj)
      (cond ((json.JsonStructure? obj)
              (let* ((hashtable (oslctor:JsonStructure-:0 obj))
                     (alist (hash-table-map hashtable
                              (lambda (key val) (cons key (json->scm val)))))
                     (avec (list->vector alist)))
                avec))
            ((json.JsonArray? obj) (map json->scm (oslctor:JsonArray-:0 obj)))
            ((json.JsonNull? obj) (void))
            ((json.JsonNumber? obj) (oslctor:JsonNumber-:0 obj))
            ((json.JsonString? obj) (oslctor:JsonString-:0 obj))
            (else (error "Unsupported JSON object" obj))))


    (define (readjson port)
      (let ((obj (json-read port)))
        (scm->json obj)))

    (define (writejson JSON PORT)
      (json-write (json->scm JSON) PORT))
  )
}
#pragma prolog {
  (predicate (result-of (readjson port) json))
  (predicate (result-of (writejson _ port) void))
}

read(p port) = readjson(p)
parse_json(s str) = call_with_input_string(s, readjson) :: json

// num
num(j json) = match j in
| JsonNumber(x) -> x
| otherwize -> error("Not a number", j)

// str
str(j json) = match j in
| JsonString(x) -> x
| otherwize -> error("Not a string", j)

// list(T)
list(j json) = match j in
| JsonArray(x) -> x
| otherwize -> error("Not a list", j)

// dict(str, json)
dict(j json) = match j in
| JsonStructure(x) -> x
| otherwize -> error("Not a structure", j)


json_ref(j json, k str) = j.dict()[k]
json_ref(j json, k num) = j.list()[k]
j[k] = json_ref(j, k)
