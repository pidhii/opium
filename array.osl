require "base"

////
//
// Fixed size array data type based on SRFI-43 Scheme Vector
// see: https://www.gnu.org/software/guile/manual/html_node/SRFI_002d43.html
//
#pragma scheme-translator {
  (inline
    (cond-expand
      (chicken (import vector-lib))
      (guile   (import (srfi :43))))

    ;; Constructors
    (define array vector)
    (define makeArray make-vector)
    (define makeUninitializedArray make-vector)
    (define copyArray vector-copy)
    (define arrcat vector-append)

    (define listToArray list->vector)
    (define arr2list vector->list)

    ;; Selectors
    (define arrlen vector-length)
    (define arrref vector-ref)

    ;; Mutators
    (define arrset vector-set!)
    (define fillArray vector-fill!))
}
//
#pragma prolog {
  (ensure-loaded "prolog-std.scm")

  ;; Constructors
  (predicate (result-of (array . Ts) (array T)) (all T Ts))
  (predicate (result-of (makeArray num T) (array T)))
  (predicate (result-of (makeUninitializedArray num) (array T)))
  (predicate (result-of (copyArray (array T) . Args) (array T))
    (or (= Args ())
        (= Args (num))
        (= Args (num num))
        (= Args (num num T))))
  (predicate (result-of (arrcat . Arrays) (array T)) (all (array T) Arrays))

  (predicate (result-of (listToArray (list T)) (array T)))
  (predicate (result-of (arr2list (array T)) (list T)))

  ;; Selectors
  (predicate (result-of (arrlen (array _)) num))
  (predicate (result-of (arrref (array T) num) T))

  ;; Mutators
  (predicate (result-of (arrset (array T) num T) void))
  (predicate (result-of (fillArray (array T) T . Args) void)
    (or (= Args ())
        (= Args (num))
        (= Argrs (num num))))
}

length(arr) = arrlen(arr)
list(arr array(T)) = arr2list(arr)

arr1 + arr2 = arrcat(arr1, arr2)
arr[k] = arrref(arr, k)
set arr[k] = x = arrset(arr, k, x)


type arrayIterator(T) = {
  arr array(T),
  cur num
}

iter(arr array(T), from) = arrayIterator(arr, from)
iter(arr array(T)) = arrayIterator(arr, 0)

next(it arrayIterator(T)) = {
  if it#cur < arrlen(it#arr) then {
    result = it#arr[it#cur]
    set it#cur = it#cur + 1
    Some(result)
  }
  else
    Nothing()
}
