require "base"
require "error"

#pragma scheme-translator {
  (inline
    (cond-expand
      (chicken
        (import hash-trie)
        (define makeHashTrieType make-hash-trie-type)
        (define makeHashTrie make-hash-trie)
        (define hashTrieInsert hash-trie/insert)
        (define hashTrieDelete hash-trie/delete)
        (define hashTrieLookup hash-trie/lookup)
        (define hashTrieCount hash-trie/count)
        (define hashTrieEmpty hash-trie/empty?)
        (define hashTrieContains hash-trie/member?)
        (define is eq?))))
}
#pragma prolog {
  (predicate (result-of (makeHashTrieType (fn (K K) bool) (fn (K) num)) (trietype K V)))
  (predicate (result-of (makeHashTrie (trietype K V)) (trie K V)))
  (predicate (result-of (hashTrieInsert (trie K V) K V) (trie K V)))
  (predicate (result-of (hashTrieDelete (trie K V) K) (trie K V)))
  (predicate (result-of (hashTrieLookup (trie K V) K V) V))
  (predicate (result-of (hashTrieCount (trie K V)) num))
  (predicate (result-of (hashTrieEmpty (trie K V)) num))
  (predicate (result-of (hashTrieContains (trie K V) K) bool))
  (predicate (result-of (gensym) _))
  (predicate (result-of (is T T) bool))
}


length(trie trie(K, V)) = hashTrieCount(trie)
empty(trie trie(K, V)) = hashTrieEmpty(trie)

contains(trie trie(K, V), key K) = hashTrieContains(trie, key)

trie() = {
  equalfn = coerce(==) :: fn(K, K) -> bool
  hashfn = coerce(hash) :: fn(K) -> num
  trietype = makeHashTrieType(equalfn, hashfn)
  return makeHashTrie(trietype)
}

trie[key] = {
  assert { trie :: trie(K, V) key :: K}
  default = gensym() :: V
  result = hashTrieLookup(trie, key, default)
  if result.is(default) then
    error("No such key", key, trie)
  return result
}
get(trie trie(K, V), key K, default V) = hashTrieLookup(trie, key, default)
insert(trie trie(K, V), key K, val V) = hashTrieInsert(trie, key, val)
